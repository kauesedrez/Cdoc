using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.IO;

namespace cdoc
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.SetWindowSize(130, 50);
            Principal p = new Principal();
            p.ini();
        }
    }

    class Principal : Object
    {
        Regex padrao = new Regex(@"/\*\*\*(.|\n)*?\*\*\*/", RegexOptions.None);
        
        Regex padraoTroca = new Regex(@"/\*\*\*|\*\*\*/", RegexOptions.None);

        string blocoInicio;

        string cabecalhoLimpo;

        string saida;

        public void ini()
        {

            //carrega o arquivo
            FileStream fs = new FileStream(@"D:\teste.js", FileMode.OpenOrCreate, FileAccess.ReadWrite);
            StreamReader sr = new StreamReader(fs);
            string conteudo = sr.ReadToEnd();
            sr.Close();
            //-- fim função arquivo

            Console.WriteLine("Teste de Expressões Regulares");

            foreach (Match cdoc in padrao.Matches(conteudo))
            {
                string resultado = padraoTroca.Replace(cdoc.Value, "");
                //Console.WriteLine(resultado+"  \n\n\n");
                //no primeiro teste tem que verificar se o arquivo começa com #cdoc
                //esta dentro do resultado
                //o resultado deve ser analizado
                Regex inicio = new Regex("^(\n|\\s)*#cdoc", RegexOptions.None);
                if (inicio.IsMatch(resultado))
                {
                    Console.WriteLine("\n\tInicio válido\n\n");
                    blocoInicio = resultado;
                    /** registro o bloco inicial dentro da variável resultado **/

                    //tenho que registrar todo o resto do arquivo em outra variável para ser analizada
                    Regex tiraInicio = new Regex(@"^/\*\*\*(.|\n)*?\*\*\*/", RegexOptions.None);
                    // o '^' significa a correspondencia no inicio da expressão.
                    string arquivo = tiraInicio.Replace(conteudo, "");

                   //Console.WriteLine("\n\n"+resultado);


                    //sera dentro desta primeira verificação que todo o codigo se desenrolará
                    //agora tenho o cabeçalho dentro da variavel blocoInicio 
                    //e tenho todo o resto do arquivo a ser analizado dentro da variavel arquivo
                    


                    //DESENHA O HTML BASE (levar para o final?)

                    /*Console.WriteLine(@"<div class='panel panel-warning'>
<div class='panel-heading'>"+blocoInicio+@"</div><div class='panel-body'>"+arquivo+@"</div></div>");*/

                    //#########################################################################################

                    //RETRATAMENTO DA VARIÁVEL ARQUIVO

                    //[ INIT ]
                    
                    //pegas as funções 
                    Regex padraoFuncoes = new Regex(@"/\*\*\*(\n|\s)*\[init function\](.|\n)*?\[end function\]\s*\*\*\*/", RegexOptions.None);
                    foreach (Match funcoes in padraoFuncoes.Matches(arquivo))
                    {
                        //funcoes guarda todas as funções do arquivo
                        //guardar em array ?
                        //não há problema em pegar a função dentro do bloco desde que sejam aplicadas as tags corretas

                        //retira os comandos cdoc da variavel funcoes
                        //var funcaoLimpa retem a função sem comentarios
                        Regex retira = new Regex(@"/\*\*\*(\n|\s)*\[init function\](.|\n)*?\*\*\*/|/\*\*\*(\n|\s)*\[end function\](.|\n)*?\*\*\*/", RegexOptions.None);
                        string funcaoLimpa = retira.Replace(funcoes.Value, "");
                        

                        //pega o cabeçalho da função
                        Regex cabecalho = new Regex(@"/\*\*\*(\n|\s)*\[init function\](.|\n)*?\*\*\*/", RegexOptions.None);
                        
                        foreach (Match funcaoCabecalho in cabecalho.Matches(funcoes.Value))
                        {
                            //funcaoCabecalho.Value detem o cabeçalho agora
                            //temos que limpar o cabeçalho
                            Regex limpaCabecalho = new Regex(@"/\*\*\*(\n|\s)*\[init function\](\n|\s)*|(\n|\s)*\*\*\*/", RegexOptions.None);
                            cabecalhoLimpo = limpaCabecalho.Replace(funcaoCabecalho.Value, "");
                            //cabecalhoLimpo detem o cabeçalho sem os comandos cdoc
                            
                        }
                        /** ###
                         * agora eu tenho
                         * funcaoLimpa que retem a funcao em si sem os comando cdoc
                         * cabecalhoLimpo que retem o cabecalho sem os comando cdoc
                         * todo: gerar codigo html
                         * tem que fazer a substituição no arquivo original ou criar uma variavel nova chamada saida
                         * agora tenho cabecalhoLimpo com o cabeçalho da função - que pode ser tratado com split - e tenho 
                         * funcao limpa com o corpo da funcao.
                         * o que deve ser feito depois é recriar o arquivo apenas com substituições e usar essas variaveis para criar o index
                         * das funções
                         * 
                         */


                        

                    }

                    //blocos
                    Regex padraoBlocos = new Regex(@"/\*\*\*(\n|\s)*\[init block\](.|\n)*?\[end block\]\s*\*\*\*/", RegexOptions.None);
                    foreach (Match blocos in padraoBlocos.Matches(arquivo))
                    {

                        Regex retira = new Regex(@"/\*\*\*(\n|\s)*\[init block\](.|\n)*?\*\*\*/|/\*\*\*(\n|\s)*\[end block\](.|\n)*?\*\*\*/", RegexOptions.None);
                        string blocoLimpo = retira.Replace(blocos.Value, "");

                        //pega o cabeçalho da bloco
                        Regex cabecalho = new Regex(@"/\*\*\*(\n|\s)*\[init block\](.|\n)*?\*\*\*/", RegexOptions.None);

                        foreach (Match blocoCabecalho in cabecalho.Matches(blocos.Value))
                        {
                            //funcaoCabecalho.Value detem o cabeçalho agora
                            //temos que limpar o cabeçalho
                            Regex limpaBloco = new Regex(@"/\*\*\*(\n|\s)*\[init block\](\n|\s)*|(\n|\s)*\*\*\*/", RegexOptions.None);
                            cabecalhoLimpo = limpaBloco.Replace(blocoCabecalho.Value, "");
                            //cabecalhoLimpo detem o cabeçalho sem os comandos cdoc

                        }
                        /**
                         * blocoLimpo detem o bloco
                         * cabecalhoLimpo detem o bloco
                         * guardar em arrays para se usar no index das funções depois
                         * **/

                       


                    }


                    // ##########################################################################################
                    // TRABALHANDO COM O SPLIT REPLACE
                    // ##########################################################################################
                    

                    // var conteudo retem o arquivo original

                    //vamos fazer um split

                    String p = @"/\*\*\*|\*\*\*/";

                    String[] elements = Regex.Split(conteudo, p);

                    string saida = "";

                    string tmp="";

                    Regex initFunction=new Regex(@"\[init function\]",RegexOptions.None);
                    Regex endFunction=new Regex(@"\[end function\]",RegexOptions.None);
                    Regex initBlock=new Regex(@"\[init block\]",RegexOptions.None);
                    Regex endBlock=new Regex(@"\[end block\]",RegexOptions.None);
                    Regex initBotao = new Regex(@"-->", RegexOptions.None);
                    Regex endBotao = new Regex(@"<--", RegexOptions.None);
                    string a;


                    //Console.WriteLine(quebraDeLinha.Replace("ola\nmundo","-"));
                    //Console.WriteLine("ola\nmundo");



                    for (int i = 0; i < elements.Length; i++)
                    {
                        //Console.WriteLine("evento i: " + i + "\n" + elements[i] + "\n---------------\n\n");
                        //Console.WriteLine(elements.Length);
                        if (i == 1)
                        {

                            saida += @"<div class='panel panel-warning'><div class='panel-heading'>" + codeList(elements[1], "titulo") +
                                @"</div><div class='panel-body'><pre><code>";
                        }
                        else if (initFunction.IsMatch(elements[i]))
                        {
                            
                            saida += @"</code></pre><div class='panel panel-primary noMargin'><div class='panel-heading'>"+codeList(elements[i],"funcao")+
                                        @"</div><div class='panel-body noMargin'><pre><code>";
                          
                        }
                        else if (endFunction.IsMatch(elements[i]))
                        {
                            saida += @"</code></pre></div></div><pre><code>";
                        }
                        else if (initBlock.IsMatch(elements[i]))
                        {
                            saida += @"</code></pre><div class='panel panel-primary'><div class='panel-body'><pre><code>";
                            tmp = elements[i];
                        }
                        else if (endBlock.IsMatch(elements[i]))
                        {

                           
                            saida += @"</code></pre></div><div class='panel-footer'>"+codeList(tmp,"bloco")+
                                @"</div></div><pre><code>";
                        }
                        else if(initBotao.IsMatch(elements[i]))
                        {

                            a = elements[i].Replace("-->", "");
                            saida += @"</code></pre><button type='button' class='btn btn-default myButton' data-toggle='tooltip' data-placement='right' title='"+a+@"'>";
                        }
                        else if (endBotao.IsMatch(elements[i]))
                        {

                            a = elements[i].Replace("<--", "");
                            saida += @"<span class='glyphicon glyphicon-search' aria-hidden='true'></span></button><pre><code>";
                        }
                        else if (i == (elements.Length - 1))
                        {
                            saida += @"</code></pre></div></div>";
                        }

                        else
                        {
                            saida += elements[i].Trim();
                        }
                    }
                    string inicioHTML = @"<!DOCTYPE html>
<html lang='en'>
  <head>
    <meta charset='utf-8'>
    <meta http-equiv='X-UA-Compatible' content='IE=edge'>
    <meta name='viewport' content='width=device-width, initial-scale=1'>
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>#CDOC : teste.js</title>
    <script src='js/jquery.js'></script>
    
    <link href='css/bootstrap.min.css' rel='stylesheet'>
    <script src='js/bootstrap.js'></script>
    <link rel='stylesheet' href='highlight/styles/color-brewer.css'>
    <script src='highlight/highlight.pack.js'></script>
    <script>
    hljs.initHighlightingOnLoad();
    $(function () {
    $('[data-toggle="+'\u0022'+"tooltip"+'\u0022'+ @"]').tooltip()
    })
    </script>
    
    <style type='text/css'>
    .myButton {
        margin-left:20px;
    }
    pre{
    background-color: transparent;
    padding: 0;
    margin: 0;
    border:0;
    }
    .noMargin {margin:0;padding:0;}
    .btn, .btn-default{
    font-family: Courier New;
    font-size: 12px;
    font-weight: bold;
    color:#0000cc;
    }
    .tooltip-inner{
    background-color: #ddd;
    color: #444;
    }
    .noCode{
    color:red;
    }
    .table2 {
    font-size:10px;
    color:#555;
    margin:0;
    }
    .table3 {
    font-size:10px;
    color:#eee;
 margin:0;

    }
    </style>
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
    <script src='https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js'></script>
    <script src='https://oss.maxcdn.com/respond/1.4.2/respond.min.js'></script>
    <![endif]-->
  </head>
  <body>
    
    <div class='container'>
      <div class='page-header'>
        <h1>#CDOC <small>Cedros Documenter </small></h1>
      </div>
      <div class='alert alert-success' role='alert'>File: teste.js</div>";
                    string meioHTML = saida;
                    string fimHTML = @" </body></html>";

                    FileInfo arq = new FileInfo(@"D:\doc.html");
                    if (File.Exists(arq.Name))
                    {
                        arq.Delete();
                    }

                    fs = new FileStream(@"D:\PROGRAMACAO\VISUAL STUDIO\cdoc\htmlCdoc\testeBin.html", FileMode.OpenOrCreate, FileAccess.Write);
                
                StreamWriter sw = new StreamWriter(fs);
                    sw.Write(inicioHTML+meioHTML+fimHTML);
                    sw.Close();
                    







                    Console.WriteLine("Documentação gerada com sucesso");

                    //##########################################################################################

                  
                    Console.ReadLine();
                    return;
                }
                else
                {
                    Console.WriteLine("\nInicio Inválido");
                    Console.ReadLine();
                    return;                   
                }

            }

            Console.WriteLine("\n\n\nPressione Enter para sair");
            Console.ReadLine();
        }

        public string codeList(string x, string y)
        {

            String r = @":|\n";

            String[] codes = Regex.Split(x, r);

            string titulo = "";

            string cab = "";

            if (y == "titulo")
                cab += "<table class=\"table table-hover\">";
            if (y == "bloco")
                cab += "<table class=\"table table-condensed table2\">";
            if (y == "funcao")
                cab += "<table class=\"table table-condensed table3\">";

          //  cab += "<thead><tr><td><b><i>Propriedade</i></b></td><td><b><i>Valor</i></b></td></tr></thead>";

            for (int k = 0; k < codes.Length; k++)
            {

                switch (codes[k].Trim().ToLower())
                {


                    case "#autor":
                        cab += "<tr><td>Autor</td><td>" + codes[k + 1] + "</td></tr>";
                        break;

                    case "#init":
                        cab += "<tr><td>Inicio do Desenvolvimento</td><td>" + codes[k + 1] + "</td></tr>";
                        break;

                    case "#lc":
                        cab += "<tr><td>Última Modificação</td><td>" + codes[k + 1] + "</td></tr>";
                        break;

                    case "#project":
                        cab += "<tr><td>Integrante do Projeto</td><td>" + codes[k + 1] + "</td></tr>";
                        break;

                    case "#title":
                        cab += "<tr><td>Título</td><td>" + codes[k + 1] + "</td></tr>";
                        break;

                    case "#filename":
                        cab += "<tr><td>Nome do Arquivo</td><td>" + codes[k + 1] + "</td></tr>";
                        break;

                    case "#dependences":
                        cab += "<tr><td>Dependências para Funcionar</td><td>" + codes[k + 1] + "</td></tr>";
                        break;

                    case "#desc":
                        cab += "<tr><td>Descrição</td><td>" + codes[k + 1] + "</td></tr>";
                        break;

                    case "#obs":
                        cab += "<tr><td>Observações</td><td>" + codes[k + 1] + "</td></tr>";
                        break;

                    case "#version":
                        cab += "<tr><td>Versão</td><td>" + codes[k + 1] + "</td></tr>";
                        break;

                    case "#name":
                        titulo += "<h3>" + codes[k + 1] + "</h3>";
                        cab += "<tr><td>Nome</td><td>" + codes[k + 1] + "</td></tr>";

                        break;


                }
            }
            cab += "</table>";

            return titulo+cab;
        }
    }

}
